import time

import secure_operator

from numpy.ndarray import ndarray

from sequre.constants import (
    DEBUG, IR_OPT_ENCODING_OPT_NAME_BRUTE_FORCE,
    IR_OPT_ENCODING_ROW_WISE_ENUM,
    IR_OPT_ENCODING_COL_WISE_ENUM,
    ENC_ROW, ENC_DIAG)
from sequre.types.ciphertensor import Ciphertensor
from sequre.lattiseq.ckks import Ciphertext

from matmul_reorder import evaluate_and_reorder
from bet import BET


def matmul_reordering(mpc, mats):
    return evaluate_and_reorder(mpc, [m for m in mats])


def bet_enc_init(bet_encoding, args):
    return BET(bet_encoding, args)


def bet_enc_opt(bet):
    with time.timing("IR encoding optimization"):
        bet.encoding_opt(method=IR_OPT_ENCODING_OPT_NAME_BRUTE_FORCE)
    
    if DEBUG:
        print(f"Optimized cost: {bet._cost}")


def bet_enc_matmul(mpc, a, b, bet, a_node_id, b_node_id):
    a_is_target = a_node_id in bet.encoding_candidates
    b_is_target = b_node_id in bet.encoding_candidates

    if not a_is_target and not b_is_target:
        return secure_operator.matmul(mpc, a, b)
    
    assert a_is_target ^ b_is_target, "Only one operand can have variable encoding in matmul"

    target_node_id = a_node_id if a_is_target else b_node_id
    target_encoding = bet.encoding_candidates[target_node_id].metadata.encoding

    assert 0 < target_encoding < 4, "Internal error: IR encoding optimization: invalid target encoding"

    if isinstance(a, Ciphertensor):
        assert b_is_target, "Internal error: second operand should be plain in matmul encoding IR optimization"
        
        if target_encoding == IR_OPT_ENCODING_ROW_WISE_ENUM:
            encrypted_plain = Ciphertensor[Ciphertext].enc(mpc, b, encoding=ENC_ROW)
        elif target_encoding == IR_OPT_ENCODING_COL_WISE_ENUM:
            encrypted_plain = Ciphertensor[Ciphertext].enc(mpc, b.T, encoding=ENC_ROW)
            encrypted_plain._transposed = True
        else:
            encrypted_plain = Ciphertensor[Ciphertext].enc(mpc, b, encoding=ENC_DIAG)
        
        return secure_operator.matmul(mpc, a, encrypted_plain)
        
    elif isinstance(b, Ciphertensor):
        assert a_is_target, "Internal error: first operand should be plain in matmul encoding IR optimization"
        
        if target_encoding == IR_OPT_ENCODING_ROW_WISE_ENUM:
            encrypted_plain = Ciphertensor[Ciphertext].enc(mpc, a.T, encoding=ENC_ROW)
        elif target_encoding == IR_OPT_ENCODING_COL_WISE_ENUM:
            encrypted_plain = Ciphertensor[Ciphertext].enc(mpc, a, encoding=ENC_ROW)
            encrypted_plain._transposed = True
        else:
            encrypted_plain = Ciphertensor[Ciphertext].enc(mpc, a.T, encoding=ENC_DIAG)
        
        return secure_operator.matmul(mpc, b.T, encrypted_plain).T

    if DEBUG:
        print(f"WARNING: Unsupported type in IR encoding optimization. Using lazy approach ... ")
    
    return secure_operator.matmul(mpc, a, b)
