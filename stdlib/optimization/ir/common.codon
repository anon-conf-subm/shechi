from sequre.constants import (
    DEBUG, IR_OPT_ENCODING_ROW_WISE_ENUM,
    IR_OPT_ENCODING_COL_WISE_ENUM,
    IR_OPT_ENCODING_DIAG_WISE_ENUM)


class Metadata:
    encoding: int  # 1, 2, 3
    shape: list[int]

    def __repr__(self):
        return f"Encoding: {self.encoding} Shape: {self.shape}"


def _is_ndarray(op_type_name):
    return op_type_name.startswith("std.numpy.ndarray.ndarray")


def _is_sharetensor(op_type_name):
    return op_type_name.startswith("std.sequre.types.sharetensor.Sharetensor")


def _is_ciphertensor(op_type_name):
    return op_type_name.startswith("std.sequre.types.ciphertensor.Ciphertensor")


def _is_mp(op_type_name):
    return op_type_name.startswith("std.sequre.types.multiparty_")


def _is_ciphertensor_plaintext(op_type_name):
    return op_type_name == "std.sequre.types.ciphertensor.Ciphertensor[std.sequre.lattiseq.ckks.Plaintext]"


def _is_ciphertensor_ciphertext(op_type_name):
    return op_type_name == "std.sequre.types.ciphertensor.Ciphertensor[std.sequre.lattiseq.ckks.Ciphertext]"


def _is_secure_container(op_type_name):
    return _is_sharetensor(op_type_name) or _is_ciphertensor(op_type_name) or _is_mp(op_type_name)


def _update_encoding_relevant_nodes(bet_node, relevant_encoding_nodes):
    if bet_node.operation != "__matmul__":
        return

    if _is_ciphertensor(bet_node.left_child.type_name) and _is_ndarray(bet_node.right_child.type_name):
        relevant_encoding_nodes[bet_node.right_child.id] = bet_node.right_child
    elif _is_ciphertensor(bet_node.right_child.type_name) and _is_ndarray(bet_node.left_child.type_name):
        relevant_encoding_nodes[bet_node.left_child.id] = bet_node.left_child


def _resolve_node_metadata_shapes(bet_node):
    if bet_node.operation == "__matmul__":
        if DEBUG:
            assert bet_node.left_child.metadata.shape[1] == bet_node.right_child.metadata.shape[0], "Shapes missmatch within matrix multiplication while performing encoding optimization"
        bet_node.metadata.shape = [
            bet_node.left_child.metadata.shape[0],
            bet_node.right_child.metadata.shape[1]]
    
    elif bet_node.operation == "T":
        assert bet_node.left_child is not None, "Ivalid operand for T in BET tree"
        bet_node.metadata.shape = bet_node.left_child.metadata.shape[::-1]
    
    elif bet_node.left_child is not None:
        bet_node.metadata.shape = bet_node.left_child.metadata.shape.copy()


def _resolve_node_metadata_encoding(bet_node):
    if _is_ndarray(bet_node.type_name):
        return

    if bet_node.operation == "__matmul__":
        left_enc = bet_node.left_child.metadata.encoding
        right_enc = bet_node.right_child.metadata.encoding

        if left_enc == IR_OPT_ENCODING_ROW_WISE_ENUM:
            bet_node.metadata.encoding = IR_OPT_ENCODING_ROW_WISE_ENUM
        elif left_enc == IR_OPT_ENCODING_COL_WISE_ENUM:
            bet_node.metadata.encoding = IR_OPT_ENCODING_COL_WISE_ENUM + int(right_enc == IR_OPT_ENCODING_ROW_WISE_ENUM)
        elif left_enc == IR_OPT_ENCODING_DIAG_WISE_ENUM:
            bet_node.metadata.encoding = right_enc
    
    elif bet_node.operation == "T":
        assert bet_node.left_child is not None, "Ivalid operand for T in BET tree"
        
        if 0 < bet_node.left_child.metadata.encoding < 3:
            bet_node.metadata.encoding = ((bet_node.left_child.metadata.encoding - 1) ^ 1) + 1  # Swap 1 and 2
        else:
            bet_node.metadata.encoding = bet_node.left_child.metadata.encoding
    
    elif bet_node.left_child is not None and bet_node.right_child is not None:
        if bet_node.left_child.metadata.encoding:
            bet_node.metadata.encoding = bet_node.left_child.metadata.encoding
        elif bet_node.right_child.metadata.encoding:
            bet_node.metadata.encoding = bet_node.right_child.metadata.encoding
    elif bet_node.left_child is not None:
        bet_node.metadata.encoding = bet_node.left_child.metadata.encoding


def _resolve_node_metadata(bet_node):
    _resolve_node_metadata_shapes(bet_node)
    _resolve_node_metadata_encoding(bet_node)


def _resolve_tree_metadata(node):
    if node.left_child is not None:
        _resolve_tree_metadata(node.left_child)
    if node.right_child is not None:
        _resolve_tree_metadata(node.right_child)
    
    _resolve_node_metadata(node)
