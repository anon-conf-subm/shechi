import math

from sequre.constants import (
    DEBUG, MHE_MPC_SWITCH_COST_ESTIMATE,
    HE_ENCRYPTION_COST_ESTIMATE, HE_ENC_COST_ESTIMATE,
    HE_ENCODING_COST_ESTIMATE, HE_DECODING_COST_ESTIMATE,
    IR_OPT_ENCODING_ROW_WISE_ENUM, IR_OPT_ENCODING_COL_WISE_ENUM,
    IR_OPT_ENCODING_DIAG_WISE_ENUM)
from sequre.types.ciphertensor import Ciphertensor
from sequre.lattiseq.params import DEFAULT_SLOTS

from common import (
    _is_ndarray, _is_ciphertensor, _is_ciphertensor_plaintext,
    _is_ciphertensor_ciphertext, _is_secure_container)


def _warning_message_unary(operator, op_type_name):
    return f"WARNING: CostEstimator: IROptimizations: The cost estimation for operator {operator} is not yet supported for operand of type {op_type_name}. Its cost will be disregarded in optimizations."


def _warning_message_binary(operator, lop_type_name, rop_type_name):
    return f"WARNING: CostEstimator: IROptimizations: The cost estimation for operator {operator} is not yet supported for operand of types {lop_type_name} and {rop_type_name}. Its cost will be disregarded in optimizations."


def _estimate_transpose(op_type_name, op_metadata):
    if _is_ndarray(op_type_name) or _is_ciphertensor(op_type_name):
        return 0.0

    if DEBUG:
        print(_warning_message_unary("T", op_type_name))
    return 0.0


def _estimate_add(lop_type_name, rop_type_name, lop_metadata, rop_metadata):
    cost = 0.0
    
    if _is_ndarray(lop_type_name) and _is_ndarray(rop_type_name):
        return cost

    ciphers_count = Ciphertensor._count_ciphers(lop_metadata.shape, DEFAULT_SLOTS)
    if _is_ciphertensor_ciphertext(lop_type_name) or _is_ciphertensor_ciphertext(rop_type_name):
        if lop_metadata.encoding != rop_metadata.encoding:
            cost += ciphers_count * MHE_MPC_SWITCH_COST_ESTIMATE
        
        if _is_ciphertensor_plaintext(lop_type_name) or _is_ciphertensor_plaintext(rop_type_name):
            cost += ciphers_count * HE_ENCRYPTION_COST_ESTIMATE
        elif not _is_secure_container(lop_type_name) or not _is_secure_container(rop_type_name):
            cost += ciphers_count * HE_ENC_COST_ESTIMATE
    elif _is_ciphertensor_plaintext(lop_type_name) or _is_ciphertensor_plaintext(rop_type_name):
        if not _is_secure_container(lop_type_name) or not _is_secure_container(rop_type_name):
            cost += ciphers_count * HE_ENC_COST_ESTIMATE
        elif lop_metadata.encoding != rop_metadata.encoding:
            cost += ciphers_count * (HE_DECODING_COST_ESTIMATE + HE_ENCODING_COST_ESTIMATE)
    else:
        if DEBUG:
            print(_warning_message_binary("__add__", lop_type_name, rop_type_name))
    
    return cost

def _estimate_matmul(lop_type_name, rop_type_name, lop_metadata, rop_metadata):
    if _is_ndarray(lop_type_name) and _is_ndarray(rop_type_name):
        return 0.0
    
    if _is_ciphertensor_ciphertext(lop_type_name):
        if lop_metadata.encoding == IR_OPT_ENCODING_ROW_WISE_ENUM and rop_metadata.encoding == IR_OPT_ENCODING_ROW_WISE_ENUM:
            return Ciphertensor._get_matmul_v2_cost_by_shape(lop_metadata.shape, rop_metadata.shape, DEFAULT_SLOTS)
        if lop_metadata.encoding == IR_OPT_ENCODING_ROW_WISE_ENUM and rop_metadata.encoding == IR_OPT_ENCODING_COL_WISE_ENUM:
            return Ciphertensor._get_matmul_v1_cost_by_shape(lop_metadata.shape, rop_metadata.shape, DEFAULT_SLOTS)
        if lop_metadata.encoding == IR_OPT_ENCODING_ROW_WISE_ENUM and rop_metadata.encoding == IR_OPT_ENCODING_DIAG_WISE_ENUM:
            return Ciphertensor._get_matmul_v3_cost_by_shape(lop_metadata.shape, rop_metadata.shape, DEFAULT_SLOTS)
        if lop_metadata.encoding == IR_OPT_ENCODING_COL_WISE_ENUM and rop_metadata.encoding == IR_OPT_ENCODING_ROW_WISE_ENUM:
            return Ciphertensor._get_matmul_tnt_cost_by_shape(lop_metadata.shape, rop_metadata.shape, DEFAULT_SLOTS)
        if lop_metadata.encoding == IR_OPT_ENCODING_COL_WISE_ENUM and rop_metadata.encoding == IR_OPT_ENCODING_COL_WISE_ENUM:
            return Ciphertensor._get_matmul_v2_cost_by_shape(lop_metadata.shape, rop_metadata.shape, DEFAULT_SLOTS)

        # Other encoding combinations are not implemented yet
        return math.inf
    
    elif _is_ciphertensor_ciphertext(rop_type_name):
        if lop_metadata.encoding == IR_OPT_ENCODING_ROW_WISE_ENUM and rop_metadata.encoding == IR_OPT_ENCODING_ROW_WISE_ENUM:
            return Ciphertensor._get_matmul_v2_cost_by_shape(lop_metadata.shape, rop_metadata.shape, DEFAULT_SLOTS)
        if lop_metadata.encoding == IR_OPT_ENCODING_ROW_WISE_ENUM and rop_metadata.encoding == IR_OPT_ENCODING_COL_WISE_ENUM:
            return Ciphertensor._get_matmul_tnt_cost_by_shape(lop_metadata.shape, rop_metadata.shape, DEFAULT_SLOTS)
        if lop_metadata.encoding == IR_OPT_ENCODING_COL_WISE_ENUM and rop_metadata.encoding == IR_OPT_ENCODING_ROW_WISE_ENUM:
            return Ciphertensor._get_matmul_v1_cost_by_shape(lop_metadata.shape, rop_metadata.shape, DEFAULT_SLOTS)
        if lop_metadata.encoding == IR_OPT_ENCODING_COL_WISE_ENUM and rop_metadata.encoding == IR_OPT_ENCODING_COL_WISE_ENUM:
            return Ciphertensor._get_matmul_v2_cost_by_shape(lop_metadata.shape, rop_metadata.shape, DEFAULT_SLOTS)
        if lop_metadata.encoding == IR_OPT_ENCODING_DIAG_WISE_ENUM and rop_metadata.encoding == IR_OPT_ENCODING_COL_WISE_ENUM:
            return Ciphertensor._get_matmul_v3_cost_by_shape(lop_metadata.shape, rop_metadata.shape, DEFAULT_SLOTS)

        # Other encoding combinations are not implemented yet
        return math.inf

    if DEBUG:
        print(_warning_message_binary("__matmul__", lop_type_name, rop_type_name))
    return 0.0


SUPPORTED_UNARY_OPS = ("T",)
UNARY_OPS_ESTIMATORS = (_estimate_transpose,)
if staticlen(SUPPORTED_UNARY_OPS) != staticlen(UNARY_OPS_ESTIMATORS):
    compile_error("Missmatch between cost estimator ops names and cost estimation methods")


SUPPORTED_BINARY_OPS = ("__add__", "__matmul__")
BINARY_OPS_ESTIMATORS = (_estimate_add, _estimate_matmul)
if staticlen(SUPPORTED_BINARY_OPS) != staticlen(BINARY_OPS_ESTIMATORS):
    compile_error("Missmatch between cost estimator ops names and cost estimation methods")


class CostEstimator:
    @staticmethod
    def estimate_binary_op_by_metadata(
            op_name, lop_type_name,
            rop_type_name, lop_metadata,
            rop_metadata):
        if op_name not in SUPPORTED_BINARY_OPS:
            if DEBUG:
                print(f"WARNING: CostEstimator: IROptimizations: The cost estimation for operator {op_name} is not yet supported. Its cost will be disregarded in optimizations.")
            return 0.0
        
        for i in staticrange(staticlen(SUPPORTED_BINARY_OPS)):
            if SUPPORTED_BINARY_OPS[i] == op_name:
                return BINARY_OPS_ESTIMATORS[i](
                    lop_type_name, rop_type_name,
                    lop_metadata, rop_metadata)
        
        raise ValueError(f"Internal error: cost estimator for {op_name} not found within {SUPPORTED_BINARY_OPS}")
    
    @staticmethod
    def estimate_unary_op_by_metadata(op_name, op_type_name, op_metadata):
        if op_name not in SUPPORTED_UNARY_OPS:
            if DEBUG:
                print(f"WARNING: CostEstimator: IROptimizations: The cost estimation for operator {op_name} is not yet supported. Its cost will be disregarded in optimizations.")
            return 0.0
        
        for i in staticrange(staticlen(SUPPORTED_UNARY_OPS)):
            if SUPPORTED_UNARY_OPS[i] == op_name:
                return UNARY_OPS_ESTIMATORS[i](op_type_name, op_metadata)
        
        raise ValueError(f"Internal error: cost estimator for {op_name} not found within {SUPPORTED_UNARY_OPS}")
        