class TomlDict:
    _ints: dict[str, int]
    _floats: dict[str, float]
    _strs: dict[str, str]

    def get(self, l: str, T: type) -> T:
        if isinstance(T, int):
            return self._ints[l]
        
        if isinstance(T, float):
            return self._floats[l]
        
        if isinstance(T, str):
            return self._strs[l]
        
        compile_error("TOML: invalid key type")
    
    def __setitem__(self, l: str, r: str):
        try:
            self._ints[l] = int(r)
        except:
            try:
                self._floats[l] = float(r)
            except:
                self._strs[l] = r


def read(path_to_toml: str) -> TomlDict:
    toml_dict = TomlDict()
    
    with open(path_to_toml) as f:
        for line in f:
            if "=" not in line:
                raise ValueError("Sequre's toml support only assignments at the moment")
            
            l, r = line.split("=")
            toml_dict[l.strip()] = r.strip()
    
    return toml_dict
