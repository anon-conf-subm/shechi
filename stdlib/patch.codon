""" This module contains temorary patches that native Codon does not support yet """

from pickler import pickle, unpickle


# Tuples cannot be overriden. Thus the custom pickling methods cannot be added to it.
def pickle_tuple_unpasteurized(tup, jar):
    for e in tup:
        pickle(e, jar, False)
        jar += e._pickle_size()


def unpickle_tuple_unpasteurized[S](jar) -> S:
    assert staticlen(S) <= 2, "Unpickling ndarrays cannot be done on larger than 2-dimensional arrays until __pickle__ method of Tuple class can be overriden."
    if staticlen(S) == 0: return S()
    _shape_0 = unpickle(jar, False, S.T1)
    jar += S.T1._pickle_size()
    if staticlen(S) == 1: return S(_shape_0,)
    _shape_1 = unpickle(jar, False, S.T2)
    jar += S.T2._pickle_size()
    return S(_shape_0, _shape_1)


def tuple_pickle_size[S]() -> int:
    return staticlen(S) * S.T1._pickle_size()


def argmin(arr):
    """    Return the index of smallest element in the array
    """
    if len(arr) == 0:
        raise ValueError("empty sequence")
    else:
        m = arr[0]
        m_idx = 0
        for idx, i in enumerate(arr):
            if i < m:
                m = i
                m_idx = idx
        return m_idx


def argmax(arr):
    """    Return the index of largest element in the array
    """
    if len(arr) == 0:
        raise ValueError("empty sequence")
    else:
        m = arr[0]
        m_idx = 0
        for idx, i in enumerate(arr):
            if i > m:
                m = i
                m_idx = idx
        return m_idx


def min_by_key(iterable, key):
    x = iterable.__iter__()
    if not x.done():
        s = x.next()
        k = key(s)
        while not x.done():
            i = x.next()
            ki = key(i)
            if ki < k:
                s = i
                k = ki
        x.destroy()
        return s
    else:
        x.destroy()
    raise ValueError("empty sequence")


def max_by_key(iterable, key):
    x = iterable.__iter__()
    if not x.done():
        s = x.next()
        k = key(s)
        while not x.done():
            i = x.next()
            ki = key(i)
            if ki > k:
                s = i
                k = ki
        x.destroy()
        return s
    else:
        x.destroy()
    raise ValueError("empty sequence")
