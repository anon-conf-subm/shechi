from stats import MPCStats
from randomness import MPCRandomness
from comms import MPCComms
from arithmetic import MPCArithmetic
from polynomial import MPCPolynomial
from boolean import MPCBoolean
from fp import MPCFP
from mhe import MPCMHE


class MPCEnv[TP]:
    # Defaults
    default_mpc_modulus: TP
    default_ciphertensor_encoding: str
    
    # Party ID
    pid: int
    
    # Libs
    stats: MPCStats
    randomness: MPCRandomness
    comms: MPCComms[TP]
    arithmetic: MPCArithmetic[TP]
    polynomial: MPCPolynomial[TP]
    boolean: MPCBoolean[TP]
    fp: MPCFP[TP]
    mhe: MPCMHE[TP]

    # Params
    local: bool

    def __init__(
            self: MPCEnv[TP], pid: int,
            local: bool, default_mpc_modulus: TP,
            expect_data_sharing: bool = False,
            default_ciphertensor_encoding: str = ""):
        # Defaults and params
        self.default_mpc_modulus = default_mpc_modulus
        self.default_ciphertensor_encoding = default_ciphertensor_encoding
        self.pid = pid
        self.local = local

        # Stats
        self.stats = MPCStats(self.pid)

        # PRGs & Network
        self.randomness = MPCRandomness(self.stats)
        self.comms = MPCComms[TP](
            self.randomness,
            self.local,
            expect_data_sharing)
        
        # MPC
        self.arithmetic = MPCArithmetic[TP](self.comms)
        self.polynomial = MPCPolynomial[TP](self.arithmetic)
        self.boolean = MPCBoolean[TP](self.polynomial)
        self.fp = MPCFP[TP](self.boolean)
        
        # HE
        self.mhe = MPCMHE(comms=self.comms)
        
        print(f'CP{self.pid}:\tMPC initialized')
    
    def council(self, value) -> List[bool]:
        return self.comms.collect(bool(value))
    
    def done(self):
        self.comms.sync_parties()
        self.comms.clean_up()
        print(f'CP{self.pid}:\tDone')


class ModulusSwitch[TP]:
    mpc: MPCEnv[TP]
    old_modulus: TP
    new_modulus: TP

    def __init__(self, mpc: MPCEnv[TP], modulus: TP):
        self.mpc = mpc
        self.old_modulus = mpc.default_mpc_modulus
        self.new_modulus = modulus

    def __enter__(self):
        self.mpc.default_mpc_modulus = self.new_modulus

    def __exit__(self):
        self.mpc.default_mpc_modulus = self.old_modulus


class EncodingSwitch[TP]:
    mpc: MPCEnv[TP]
    old_encoding: str
    new_encoding: str

    def __init__(self, mpc: MPCEnv[TP], encoding: str):
        self.mpc = mpc
        self.old_encoding = mpc.default_ciphertensor_encoding
        self.new_encoding = encoding

    def __enter__(self):
        self.mpc.default_ciphertensor_encoding = self.new_encoding

    def __exit__(self):
        self.mpc.default_ciphertensor_encoding = self.old_encoding


class StatsLog[TP]:
    mpc: MPCEnv[TP]
    old_stats: MPCStats
    file_path: Optional[str]
    mode: str
    file_only: bool

    def __init__(self, mpc: MPCEnv[TP], file_path: Optional[str], mode: str = "a+", file_only: bool = False):
        self.mpc = mpc
        self.old_stats = mpc.stats.copy()
        self.file_path = file_path
        self.mode = mode
        self.file_only = file_only

    def __enter__(self):
        self.mpc.stats.reset_stats()

    def __exit__(self):
        if self.file_path is not None:
            with open(self.file_path, self.mode) as f:
                self.mpc.stats.print_stats(f, self.file_only)
        else:
            self.mpc.stats.print_stats(file_only=self.file_only)
        
        self.mpc.stats += self.old_stats


@extend
class MPCEnv:
    def default_modulus(self, modulus: TP):
        return ModulusSwitch(self, modulus)
    
    def default_encoding(self, encoding: str):
        return EncodingSwitch(self, encoding)
    
    def stats_log(self, file_path: Optional[str] = None, mode: str = "a+", file_only: bool = False):
        return StatsLog(self, file_path, mode, file_only)
