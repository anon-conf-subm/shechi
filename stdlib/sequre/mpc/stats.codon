class MPCStats:
    # Performance warning: States are pretty big arrays. Might introduce some overhead.
    pid: int

    # Security stats
    secure_add_count: int
    secure_sub_count: int
    secure_mul_count: int
    secure_matmul_count: int
    secure_matmul_complexity: int
    secure_pow_count: int
    secure_bootstrap_count: int
    secure_rescale_count: int
    secure_mhe_mpc_switch_count: int
    secure_mpc_mhe_switch_count: int

    # MPC comms stats
    bytes_sent: int
    send_requests: int
    receive_requests: int

    # MPC arithmetics stats
    partitions_count: int
    reconstructs_count: int

    # MPC FP stats
    truncations_count: int
    
    def __init__(self: MPCStats, pid: int):
        self.pid = pid
    
    def __iadd__(self, other: MPCStats) -> MPCStats:
        assert self.pid == other.pid, "Major internal error"
        self.secure_add_count += other.secure_add_count
        self.secure_sub_count += other.secure_sub_count
        self.secure_mul_count += other.secure_mul_count
        self.secure_matmul_count += other.secure_matmul_count
        self.secure_matmul_complexity += other.secure_matmul_complexity
        self.secure_pow_count += other.secure_pow_count
        self.secure_bootstrap_count += other.secure_bootstrap_count
        self.secure_rescale_count += other.secure_rescale_count
        self.secure_mhe_mpc_switch_count += other.secure_mhe_mpc_switch_count
        self.secure_mpc_mhe_switch_count += other.secure_mpc_mhe_switch_count
        self.bytes_sent += other.bytes_sent
        self.send_requests += other.send_requests
        self.receive_requests += other.receive_requests
        self.partitions_count += other.partitions_count
        self.reconstructs_count += other.reconstructs_count
        self.truncations_count += other.truncations_count
    
    def copy(self):
        return MPCStats(
            pid=self.pid,
            secure_add_count=self.secure_add_count,
            secure_sub_count=self.secure_sub_count,
            secure_mul_count=self.secure_mul_count,
            secure_matmul_count=self.secure_matmul_count,
            secure_matmul_complexity=self.secure_matmul_complexity,
            secure_pow_count=self.secure_pow_count,
            secure_bootstrap_count=self.secure_bootstrap_count,
            secure_rescale_count=self.secure_rescale_count,
            secure_mhe_mpc_switch_count=self.secure_mhe_mpc_switch_count,
            secure_mpc_mhe_switch_count=self.secure_mpc_mhe_switch_count,
            bytes_sent=self.bytes_sent,
            send_requests=self.send_requests,
            receive_requests=self.receive_requests,
            partitions_count=self.partitions_count,
            reconstructs_count=self.reconstructs_count,
            truncations_count=self.truncations_count)

    def reset_stats(self):
        self.reset_security_stats()
        self.reset_comms_stats()
        self.reset_arithmetic_stats()
        self.reset_fp_stats()
    
    def print_stats(self, file_stream = None, file_only: bool = False):
        greeting_message = f"\nStatistics at CP{self.pid}:\n--------------------------"
        if file_stream is not None: file_stream.write(f'{greeting_message}\n')
        if not file_only:
            print(greeting_message)
        self.print_security_stats(file_stream, file_only)
        self.print_comms_stats(file_stream, file_only)
        self.print_arithmetic_stats(file_stream, file_only)
        self.print_fp_stats(file_stream, file_only)

    def reset_security_stats(self):
        self.secure_add_count = 0
        self.secure_sub_count = 0
        self.secure_mul_count = 0
        self.secure_matmul_count = 0
        self.secure_matmul_complexity = 0
        self.secure_pow_count = 0
        self.secure_bootstrap_count = 0
        self.secure_rescale_count = 0
        self.secure_mhe_mpc_switch_count = 0
        self.secure_mpc_mhe_switch_count = 0
    
    def print_security_stats(self, file_stream = None, file_only: bool = False):
        partitioning_message = f"Secure additions: {self.secure_add_count} at CP{self.pid}.\n" \
                               f"Secure subtractions: {self.secure_sub_count} at CP{self.pid}.\n" \
                               f"Secure multiplications: {self.secure_mul_count} at CP{self.pid}.\n" \
                               f"Secure matrix multiplications: {self.secure_matmul_count} at CP{self.pid}.\n" \
                               f"Secure matrix multiplication complexity: {self.secure_matmul_complexity} at CP{self.pid}.\n" \
                               f"Secure pows: {self.secure_pow_count} at CP{self.pid}.\n" \
                               f"Secure bootstraps: {self.secure_bootstrap_count} at CP{self.pid}.\n" \
                               f"Secure rescales: {self.secure_rescale_count} at CP{self.pid}.\n" \
                               f"Secure MHE -> MPC switches (ciphertexts count): {self.secure_mhe_mpc_switch_count} at CP{self.pid}.\n" \
                               f"Secure MPC -> MHE switches (ciphertexts count): {self.secure_mpc_mhe_switch_count} at CP{self.pid}"
        if file_stream is not None: file_stream.write(f'{partitioning_message}\n')
        if not file_only:
            print(partitioning_message)
    
    def reset_comms_stats(self):
        self.bytes_sent = 0
        self.send_requests = 0
        self.receive_requests = 0
    
    def print_comms_stats(self, file_stream = None, file_only: bool = False):
        bandwidth_message = f'Total bytes sent from CP{self.pid}: {self.bytes_sent}.\n'\
                            f'Total send requests from CP{self.pid}: {self.send_requests}.\n'\
                            f'Total receive requests from CP{self.pid}: {self.receive_requests}.'
        if file_stream is not None:
            file_stream.write(f'{bandwidth_message}\n')
        if not file_only:
            print(bandwidth_message)
    
    def reset_arithmetic_stats(self):
        self.partitions_count = 0
        self.reconstructs_count = 0
    
    def print_arithmetic_stats(self, file_stream = None, file_only: bool = False):
        partitioning_message = f"Beaver partitions: {self.partitions_count} at CP{self.pid}.\n" \
                               f"Beaver reconstructs: {self.reconstructs_count} at CP{self.pid}."
        if file_stream is not None: file_stream.write(f'{partitioning_message}\n')
        if not file_only:
            print(partitioning_message)
    
    def reset_fp_stats(self):
        self.truncations_count = 0
    
    def print_fp_stats(self, file_stream = None, file_only: bool = False):
        truncations_message = f"FP truncations: {self.truncations_count} at CP{self.pid}."
        if file_stream is not None: file_stream.write(f'{truncations_message}\n')
        if not file_only:
            print(truncations_message)
