from sequre.constants import mpc_uint, MPC_NBIT_K, MPC_NBIT_F, MPC_NBIT_V, MPC_MODULUS_BITS, MPC_SECOND_FIELD_SIZE
from sequre.utils.primitives import mod_inv, mod_pow
from sequre.types.utils import num_to_bits

from stats import MPCStats
from randomness import MPCRandomness
from comms import MPCComms
from arithmetic import MPCArithmetic
from polynomial import MPCPolynomial
from boolean import MPCBoolean


class MPCFP[TP]:
    # TODO: #26 Make all methods algebraic structure agnostic
    pid: int
    stats: MPCStats
    randomness: MPCRandomness
    comms: MPCComms[TP]
    arithmetic: MPCArithmetic[TP]
    polynomial: MPCPolynomial[TP]
    boolean: MPCBoolean[TP]
    invpow_cache: dict[int, TP]
    debug: bool

    def __init__(self, boolean: MPCBoolean[TP]):
        self.pid = boolean.pid
        self.stats = boolean.stats
        self.randomness = boolean.randomness
        self.comms = boolean.comms
        self.arithmetic = boolean.arithmetic
        self.polynomial = boolean.polynomial
        self.boolean = boolean

        self.invpow_cache = dict[int, TP]()

        self.debug = False
        self.reset_stats()

    def reset_stats(self):
        self.stats.reset_fp_stats()
    
    def print_stats(self, file_stream = None):
        self.stats.print_fp_stats(file_stream)
    
    def trunc(self, a, modulus, k = MPC_NBIT_K + MPC_NBIT_F, m = MPC_NBIT_F):
        self.stats.truncations_count += 1
        assert (k + MPC_NBIT_V) < MPC_MODULUS_BITS
        
        r = a.zeros()
        r_part = a.zeros()
        
        if self.pid == 0:
            r = r.rand_bits(k + MPC_NBIT_V)
            r_part = (r >> m) if modulus.popcnt() == 1 else (r & ((1 << m) - 1)) 

            r_mask = r.zeros()
            r_part_mask = r_part.zeros()
            
            for p in range(2, self.comms.number_of_parties):
                with self.randomness.seed_switch(p):
                    r_mask = r_mask.add_mod(r.rand(modulus, "uniform"), modulus)
                    r_part_mask = r_part_mask.add_mod(r_part.rand(modulus, "uniform"), modulus)

            r = r.sub_mod(r_mask, modulus)
            r_part = r_part.sub_mod(r_part_mask, modulus)

            self.comms.send(r, 1)
            self.comms.send(r_part, 1)
        elif self.pid == 1:
            r = self.comms.receive(0, T=type(r))
            r_part = self.comms.receive(0, T=type(r_part))
        else:
            with self.randomness.seed_switch(0):
                r = a.rand(modulus, "uniform")
                r_part = a.rand(modulus, "uniform")
        
        # If modulus is 2^k
        if modulus.popcnt() == 1:
            if self.pid > 0:
                c = r.sub_mod(a, modulus) if self.pid > 0 else a.zeros()
                c = self.comms.reveal(c, modulus=modulus)
                a = r_part.sub_mod(c >> m, modulus) if self.pid == 1 else r_part
            
            return a
        
        c = a.add_mod(r, modulus) if self.pid > 0 else a.zeros()
        c = self.comms.reveal(c, modulus=modulus)

        c_low = (c & ((1 << m) - 1)) if self.pid > 0 else a.zeros()
        
        if self.pid > 0:
            a = a.add_mod(r_part, modulus)
            if self.pid == 1:
                a = a.sub_mod(c_low, modulus)
            
            if m not in self.invpow_cache:
                self.invpow_cache[m] = mod_pow(mod_inv(TP(2), modulus), TP(m), modulus)
                
            a = a.mul_mod(self.invpow_cache[m], modulus)
        
        return a

    def __nee_wrapper(self, a, modulus):
        if isinstance(a, mpc_uint):
            s, sq = self.__normalizer_even_exp([a], modulus)
            return s[0], sq[0]
        else:
            return self.__normalizer_even_exp(a, modulus)

    def __normalizer_even_exp(self: MPCFP[TP], a: list[TP], modulus: TP) -> tuple[list[TP], list[TP]]:
        n = len(a)
        small_modulus = MPC_SECOND_FIELD_SIZE

        r, rbits = self.boolean.__share_random_bits(MPC_NBIT_K, MPC_NBIT_V, n, False, small_modulus, modulus)

        e = [TP(0) for _ in range(n)] if self.pid == 0 else a.add_mod(r, modulus)
        e = self.comms.reveal(e, modulus=modulus)
        ebits = [[0 for _ in range(MPC_NBIT_K)] for _ in range(n)] if self.pid == 0 else num_to_bits(e, MPC_NBIT_K)
        
        c = self.boolean.less_than_bits_public(rbits, ebits, small_modulus)

        if self.pid > 0:
            c = -c
            if self.pid == 1: c = c.add_mod(1, small_modulus)
        
        ep = [[0 for _ in range(MPC_NBIT_K + 1)] for _ in range(n)]
        if self.pid > 0:
            for i in range(n):
                ep[i][0] = c[i]
                for j in range(1, MPC_NBIT_K + 1):
                    ep[i][j] = (-ebits[i][j - 1].lsh_mod(1, small_modulus)).add_mod(1, small_modulus).mul_mod(rbits[i][j - 1], small_modulus)
                    if self.pid == 1:
                        ep[i][j] = ep[i][j].add_mod(ebits[i][j - 1], small_modulus)
        
        E = self.boolean.prefix_or(ep, small_modulus)

        tpneg = list[list[int]](n)  # zeros((n, MPC_NBIT_K))
        if self.pid > 0:
            for i in range(n):
                row = list[int](MPC_NBIT_K)
                for j in range(MPC_NBIT_K):
                    row.append(E[i][j].sub_mod((-ebits[i][j]).add_mod(1, small_modulus).mul_mod(rbits[i][j], small_modulus), small_modulus))
                tpneg.append(row)
        else:
            for _ in range(n):
                tpneg.append([0 for _ in range(MPC_NBIT_K)])
        
        Tneg = self.boolean.prefix_or(tpneg, small_modulus)

        half_len = MPC_NBIT_K // 2

        efir = ebits.mul_mod(Tneg, small_modulus) if self.pid > 0 else [[0 for _ in range(MPC_NBIT_K)] for _ in range(n)]
        rfir = self.arithmetic.multiply(rbits, Tneg, small_modulus)

        double_flag = self.boolean.less_than_bits(efir, rfir, small_modulus)
        odd_bits = list[list[int]](n)  # zeros((n, half_len))
        even_bits = list[list[int]](n) # zeros((n, half_len))

        if self.pid > 0:
            for i in range(n):
                odd_row = list[int](half_len)
                even_row = list[int](half_len)
                for j in range(half_len):
                    odd_row.append((-Tneg[i][2 * j + 1]).add_mod(1, small_modulus) if self.pid == 1 else -Tneg[i][2 * j + 1])
                    even_row.append(0 if (2 * j + 2) >= MPC_NBIT_K else (-Tneg[i][2 * j + 2]).add_mod(1, small_modulus) if self.pid == 1 else -Tneg[i][2 * j + 2])
                odd_bits.append(odd_row)
                even_bits.append(even_row)
        else:
            for i in range(n):
                odd_bits.append([0 for _ in range(half_len)])
                even_bits.append([0 for _ in range(half_len)])
        
        odd_bit_sum = [0 for _ in range(n)]
        even_bit_sum = [0 for _ in range(n)]
        
        for i in range(n):
            for e in odd_bits[i]:
                odd_bit_sum[i] = odd_bit_sum[i].add_mod(e, small_modulus)
            for e in even_bits[i]:
                even_bit_sum[i] = even_bit_sum[i].add_mod(e, small_modulus)
        
        if self.pid == 1:
            odd_bit_sum = odd_bit_sum.add_mod(1, small_modulus)
            even_bit_sum = even_bit_sum.add_mod(1, small_modulus)
        
        # If double_flag = true, then use odd_bits, otherwise use even_bits

        diff = odd_bit_sum.sub_mod(even_bit_sum, small_modulus) if self.pid != 0 else [0 for _ in range(n)]
        diff = self.arithmetic.multiply(double_flag, diff, small_modulus)
        chosen_bit_sum = even_bit_sum.add_mod(diff, small_modulus) if self.pid != 0 else [0 for _ in range(n)]
        b_mat = self.polynomial.table_lookup([TP(e) for e in chosen_bit_sum], 1, modulus)

        if self.pid > 0:
            b_sqrt = b_mat[0]
            b = b_mat[1]
            return b, b_sqrt
        
        return [TP(0) for _ in range(n)], [TP(0) for _ in range(n)]
