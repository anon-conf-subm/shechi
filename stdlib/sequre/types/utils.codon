from internal.gc import sizeof
from numpy.ndarray import ndarray

from sequre.constants import *

from llvm import *


@extend
class float:
    def ieee_754(self):
        if self == 0.0:
            return 0, 0, 0

        other_raw_int = self.bitcast_to_int()
        
        sign = other_raw_int.__lhsr__(63)
        exponent = ((other_raw_int << 1).__lhsr__(IEEE_754_MANTISSA_SIZE + 1)) - IEEE_754_EXPONENT_HALF_RANGE
        mantissa = (1 << IEEE_754_MANTISSA_SIZE) | ((other_raw_int << (IEEE_754_EXPONENT_SIZE + 1)).__lhsr__(IEEE_754_EXPONENT_SIZE + 1))
        
        return sign, exponent, mantissa


class EmptyWith:
    def __init__(self):
        pass
    def __enter__(self):
        pass
    def __exit__(self):
        pass


def __int_to_fp[TP](a: int, modulus: TP, k: int = MPC_NBIT_K, f: int = MPC_NBIT_F) -> TP:
    if a.bitlen() > k - f - 1:
        raise ValueError(f"MPC overflow detected: {k - f - 1} bits not enough to store {a.bitlen()}-bit number {a}. Increase MPC_INT_SIZE in settings to enable larger numbers.")
    
    sn = 1 if a >= 0 else -1

    az_shift = TP(a) << f
    az_trunc = az_shift & ((1 << (k - 1)) - 1)

    return az_trunc.mul_mod(sn, modulus)


def __double_to_fp[TP](x: float, modulus: TP, k: int = MPC_NBIT_K, f: int = MPC_NBIT_F, verbose: bool = False) -> TP:
    if x == 0.0:
        return TP(0)
    
    if x == float("inf"):
        print(f"WARNING: inf detected. It will be treated as a largest possible FP value: {(TP(1) << k) - 1}")
        return ((TP(1) << (k - 1)) - 1) ^ ((TP(1) << f) - 1)
    
    if x == float("-inf"):
        print(f"WARNING: -inf detected. It will be treated as a lowest possible FP value: -{(TP(1) << k) - 1}")
        return modulus - ((TP(1) << (k - 1)) - 1) ^ ((TP(1) << f) - 1)
    
    sign, exponent, mantissa = x.ieee_754()
    
    if DEBUG and verbose and -exponent > f:
        print(f"WARNING: MPC underflow detected. Value will be set to zero.")
        
    if exponent + 1 > k - f - 1:
        raise ValueError(f"MPC overflow detected: {k - f - 1} bits not enough to store {exponent + 1}-bit number {x}.\nIncrease MPC_INT_SIZE in settings to enable larger numbers.")
    
    x_fp = TP(mantissa) >> (IEEE_754_MANTISSA_SIZE - exponent - f)
    return x_fp.neg_mod(modulus) if sign else x_fp


def __fp_to_double[TP](x_fp: TP, modulus: TP, k: int, f: int) -> float:
    sign = int(x_fp > (TP(1) << (k - 1)))
    x = x_fp.neg_mod(modulus) if sign else x_fp
    x_trunc = x & ((TP(1) << (k - 1)) - 1)
    bitlen = int(x_trunc.bitlen())
    exponent = bitlen - f - 1
    mantissa = int(x_trunc << (IEEE_754_MANTISSA_SIZE - bitlen + 1))
    mantissa ^= (1 << IEEE_754_MANTISSA_SIZE)

    return ((sign << 63) | ((exponent + IEEE_754_EXPONENT_HALF_RANGE) << IEEE_754_MANTISSA_SIZE) | mantissa).bitcast_to_float()


def int_to_fp[TP](x, modulus: TP, k: int = MPC_NBIT_K, f: int = MPC_NBIT_F):
    if isinstance(x, list[list[int]]):
        return [[__int_to_fp(e, modulus, k, f) for e in row] for row in x]
    elif isinstance(x, list[int]):
        return [__int_to_fp(e, modulus, k, f) for e in x]
    elif isinstance(x, int):
        return __int_to_fp(x, modulus, k, f)
    compile_error(f"Invalid type of {x}.\n It should be either, int, list[int] or list[list[int]]")


def double_to_fp[TP](x, modulus: TP, k: int = MPC_NBIT_K, f: int = MPC_NBIT_F):
    if isinstance(x, list[list[float]]):
        return [[__double_to_fp(e, modulus, k, f) for e in row] for row in x]
    elif isinstance(x, list[float]):
        return [__double_to_fp(e, modulus, k, f) for e in x]
    elif isinstance(x, float):
        return __double_to_fp(x, modulus, k, f)
    compile_error("Invalid type. It should be either, float, list[float] or list[list[float]]")


def fp_to_double[TP](x, modulus: TP, k = MPC_NBIT_K, f = MPC_NBIT_F):
    if isinstance(x, list[list[TP]]):
        return [[__fp_to_double(e, modulus, k, f) for e in row] for row in x]
    elif isinstance(x, list[TP]):
        return [__fp_to_double(e, modulus, k, f) for e in x]
    elif isinstance(x, TP):
        return __fp_to_double(x, modulus, k, f)
    compile_error("Invalid type. It should be either, UInt[N], list[UInt[N]] or list[list[UInt[N]]]")


def num_to_bits[TP](a: list[TP], bitlen: int, little_end: bool = False) -> list[list[int]]:
    b = list[list[type(MPC_SECOND_FIELD_SIZE)]](len(a))

    for i in range(len(a)):
        row = list[type(MPC_SECOND_FIELD_SIZE)](bitlen)
        order_generator = range(bitlen - 1, -1, -1) if little_end else range(bitlen)
        for j in order_generator:
            row.append(type(MPC_SECOND_FIELD_SIZE)((a[i] & (TP(1) << (bitlen - 1 - j))) != 0))
        b.append(row)
    
    return b


def contains_type[T](container) -> bool:
    if not isinstance(T, ByVal):
        compile_error("Target type needs to be by-value")
    
    if isinstance(container, ndarray):
        if isinstance(type(container.data[0]), T):
            return True
        return False
    
    if isinstance(container, ByVal):
        if isinstance(container, T):
            return True
        return False
    
    return contains_type(container=container.T, T=T)


def core_type_size(container) -> int:
    if isinstance(container, ndarray):
        return sizeof(type(container.data[0]))
    
    if isinstance(container, ByVal):
        return sizeof(type(container))
    
    return core_type_size(container=container.T)


def is_same_func(foo, bar) -> bool:
    if len(foo.__class__) != len(bar.__class__):
        return False
    
    foo_name = foo.__class__.__name__
    bar_name = bar.__class__.__name__
    unmangled_foo_name = foo_name[:foo_name.index("[")] if "[" in foo_name else foo_name
    unmangled_bar_name = bar_name[:bar_name.index("[")] if "[" in bar_name else bar_name

    return unmangled_foo_name == unmangled_bar_name
