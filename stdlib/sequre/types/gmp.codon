""" Module containing GMP types """
from llvm import *

from sequre.constants import DEBUG, GMP_LIMB_SIZE, GMP_PATH, gmp_limb_t


class mpz_t:
    _mp_alloc: i32
    _mp_size: i32
    _mp_d: Ptr[gmp_limb_t]


from C import GMP_PATH.__gmpz_sizeinbase(mpz_t, i32) -> u32 as mpz_sizeinbase
from C import GMP_PATH.__gmpz_invert(mpz_t, mpz_t, mpz_t) -> i32 as mpz_invert
from C import GMP_PATH.__gmpz_mod(mpz_t, mpz_t, mpz_t) as mpz_mod
from C import GMP_PATH.__gmpz_fdiv_q(mpz_t, mpz_t, mpz_t) as mpz_fdiv_q
from C import GMP_PATH.__gmpz_fdiv_q_ui(mpz_t, mpz_t, u64) -> u64 as mpz_fdiv_q_ui
from C import GMP_PATH.__gmpz_fdiv_ui(mpz_t, u64) -> u64 as mpz_fdiv_ui
from C import GMP_PATH.__gmpz_mul(mpz_t, mpz_t, mpz_t) as mpz_mul
from C import GMP_PATH.__gmpz_mul_si(mpz_t, mpz_t, int) as mpz_mul_si
from C import GMP_PATH.__gmpz_mul_ui(mpz_t, mpz_t, u64) as mpz_mul_ui
from C import GMP_PATH.__gmpz_clear(mpz_t) as mpz_clear


@extend
class mpz_t:
    def str_raw(self) -> str:
       return f"mpz_t({self._mp_alloc}, {self._mp_size}, {List(arr=Array(self._mp_d, int(self._mp_alloc)), len=int(self._mp_alloc))})"

    def to_int_n(self, N: Static[int]) -> Int[N]:
        if DEBUG:
            _mp_bitlen = mpz_sizeinbase(self, 2i32)
            if _mp_bitlen >= u32(N):
                raise ValueError(f"mpz_t of size {_mp_bitlen} is too big for Int[{N}] (Note: 1 bit is reserved for sign).")
        
        if int(self._mp_size) < 0:
            _self = mpz_t(self._mp_alloc, -self._mp_size, self._mp_d)
            return -Int[N](_self.to_uint_n(N))

        return Int[N](self.to_uint_n(N))

    def to_uint_n(self, N: Static[int]) -> UInt[N]:
        if DEBUG:
            if self._mp_size < 0i32:
                raise ValueError("Cannot cast negative mpz_t to UInt for safety reasons.")
            
            _mp_bitlen = mpz_sizeinbase(self, 2i32)
            if _mp_bitlen > N:
                raise ValueError(f"mpz_t of size {_mp_bitlen} is too big for UInt[{N}].")
        
        LIMBS_COUNT: Static[int] = N // GMP_LIMB_SIZE
        int_t_ptr = Ptr[gmp_limb_t](LIMBS_COUNT)
        _mp_size = int(self._mp_size)

        for i in range(_mp_size):
            int_t_ptr[i] = self._mp_d[i]
        
        for i in range(_mp_size, LIMBS_COUNT):
            int_t_ptr[i] = gmp_limb_t(0)
        
        uintn = Ptr[UInt[N]](int_t_ptr.as_byte())[0]
        mpz_clear(self)
        return uintn


@extend
class UInt:
    def to_mpz_t(self: UInt[N]) -> mpz_t:
        _mp_size = (int(self.bitlen()) + GMP_LIMB_SIZE - 1) // GMP_LIMB_SIZE
        _mp_alloc = _mp_size

        _mpz_t = mpz_t(i32(_mp_alloc), i32(_mp_size), Ptr[gmp_limb_t](_mp_alloc))
        _self_ptr = Ptr[gmp_limb_t](__ptr__(self).as_byte())

        for i in range(_mp_size):
            _mpz_t._mp_d[i] = _self_ptr[i]

        return _mpz_t
    
    def gmp_mod_inv(self, other: UInt[N]) -> UInt[N]:
        r_mpz_t = mpz_t()
        check = mpz_invert(r_mpz_t, self.to_mpz_t(), other.to_mpz_t())
        
        if DEBUG:
            if check == i32(0):
                raise ValueError(f"Modular inverse of {self} w.r.t. {other} could not be computed")
        
        return r_mpz_t.to_uint_n(N)
    
    def gmp_mod(self, other: UInt[N]) -> UInt[N]:
        r_mpz_t = mpz_t()
        mpz_mod(r_mpz_t, self.to_mpz_t(), other.to_mpz_t())
        return r_mpz_t.to_uint_n(N)
    
    def gmp_floordiv(self, other: UInt[N]) -> UInt[N]:
        r_mpz_t = mpz_t()
        mpz_fdiv_q(r_mpz_t, self.to_mpz_t(), other.to_mpz_t())
        return r_mpz_t.to_uint_n(N)
    
    def gmp_mod_ui(self, other: u64) -> u64:
        return mpz_fdiv_ui(self.to_mpz_t(), other)
    
    def gmp_floordiv_ui(self, other: u64) -> UInt[N]:
        r_mpz_t = mpz_t()
        mpz_fdiv_q_ui(r_mpz_t, self.to_mpz_t(), other)
        return r_mpz_t.to_uint_n(N)
    
    def gmp_mul(self, other: UInt[N]) -> UInt[N]:
        r_mpz_t = mpz_t()
        mpz_mul(r_mpz_t, self.to_mpz_t(), other.to_mpz_t())
        return r_mpz_t.to_uint_n(N)
    
    def gmp_mul_si(self, other: int) -> UInt[N]:
        r_mpz_t = mpz_t()
        mpz_mul_si(r_mpz_t, self.to_mpz_t(), other)
        return r_mpz_t.to_uint_n(N)
    
    def gmp_mul_ui(self, other: u64) -> UInt[N]:
        r_mpz_t = mpz_t()
        mpz_mul_ui(r_mpz_t, self.to_mpz_t(), other)
        return r_mpz_t.to_uint_n(N)
    
    def gmp_mul_mod(self, other: UInt[N], modulus: UInt[N]) -> UInt[N]:
        r_mpz_t = mpz_t()
        mpz_mul(r_mpz_t, self.to_mpz_t(), other.to_mpz_t())
        mpz_mod(r_mpz_t, r_mpz_t, modulus.to_mpz_t())
        return r_mpz_t.to_uint_n(N)
    
    def gmp_mul_mod_si(self, other: int, modulus: UInt[N]) -> UInt[N]:
        r_mpz_t = mpz_t()
        mpz_mul_si(r_mpz_t, self.to_mpz_t(), other)
        mpz_mod(r_mpz_t, r_mpz_t, modulus.to_mpz_t())
        return r_mpz_t.to_uint_n(N)
    
    def gmp_mul_mod_ui(self, other: u64, modulus: UInt[N]) -> UInt[N]:
        r_mpz_t = mpz_t()
        mpz_mul_ui(r_mpz_t, self.to_mpz_t(), other)
        mpz_mod(r_mpz_t, r_mpz_t, modulus.to_mpz_t())
        return r_mpz_t.to_uint_n(N)


@extend
class Int:
    def to_mpz_t(self: Int[N]) -> mpz_t:
        if self < Int[N](0):
            uint_mpz_t = UInt[N](-self).to_mpz_t()
            uint_mpz_t._mp_size = -uint_mpz_t._mp_size
            return uint_mpz_t
        
        return UInt[N](self).to_mpz_t()
    
    def gmp_mod(self, other: Int[N]) -> Int[N]:
        r_mpz_t = mpz_t()
        mpz_mod(r_mpz_t, self.to_mpz_t(), other.to_mpz_t())
        return r_mpz_t.to_int_n(N)
    
    def gmp_floordiv(self, other: Int[N]) -> Int[N]:
        r_mpz_t = mpz_t()
        mpz_fdiv_q(r_mpz_t, self.to_mpz_t(), other.to_mpz_t())
        return r_mpz_t.to_int_n(N)
    
    def gmp_mod_ui(self, other: u64) -> u64:
        return mpz_fdiv_ui(self.to_mpz_t(), other)
    
    def gmp_floordiv_ui(self, other: u64) -> Int[N]:
        r_mpz_t = mpz_t()
        mpz_fdiv_q_ui(r_mpz_t, self.to_mpz_t(), other)
        return r_mpz_t.to_int_n(N)

    def gmp_mul(self, other: Int[N]) -> Int[N]:
        r_mpz_t = mpz_t()
        mpz_mul(r_mpz_t, self.to_mpz_t(), other.to_mpz_t())
        return r_mpz_t.to_int_n(N)
    
    def gmp_mul_si(self, other: int) -> Int[N]:
        r_mpz_t = mpz_t()
        mpz_mul_si(r_mpz_t, self.to_mpz_t(), other)
        return r_mpz_t.to_int_n(N)
    
    def gmp_mul_ui(self, other: u64) -> Int[N]:
        r_mpz_t = mpz_t()
        mpz_mul_ui(r_mpz_t, self.to_mpz_t(), other)
        return r_mpz_t.to_int_n(N)

    def gmp_mul_mod(self, other: Int[N], modulus: Int[N]) -> Int[N]:
        r_mpz_t = mpz_t()
        mpz_mul(r_mpz_t, self.to_mpz_t(), other.to_mpz_t())
        mpz_mod(r_mpz_t, r_mpz_t, modulus.to_mpz_t())
        return r_mpz_t.to_int_n(N)
    
    def gmp_mul_mod_si(self, other: int, modulus: Int[N]) -> Int[N]:
        r_mpz_t = mpz_t()
        mpz_mul_si(r_mpz_t, self.to_mpz_t(), other)
        mpz_mod(r_mpz_t, r_mpz_t, modulus.to_mpz_t())
        return r_mpz_t.to_int_n(N)
    
    def gmp_mul_mod_ui(self, other: u64, modulus: Int[N]) -> Int[N]:
        r_mpz_t = mpz_t()
        mpz_mul_ui(r_mpz_t, self.to_mpz_t(), other)
        mpz_mod(r_mpz_t, r_mpz_t, modulus.to_mpz_t())
        return r_mpz_t.to_int_n(N)
    