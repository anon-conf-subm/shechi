""" Stats utils """
import math

from numpy.create import array
from numpy.ndarray import ndarray

from patch import argmin


# Stats is a struct storing the real, imaginary and l2 norm (modulus)
# about the precision of a complex value.
class Stats:
    real: float
    imag: float
    l2: float


# PrecisionStats is a struct storing statistic about the precision of a CKKS plaintext
class PrecisionStats:
    max_delta: Stats
    min_delta: Stats
    max_precision: Stats
    min_precision: Stats
    mean_delta: Stats
    mean_precision: Stats
    median_delta: Stats
    median_precision: Stats
    std_freq: float
    std_time: float

    real_dist: list[dict[str, float]]
    imag_dist: list[dict[str, float]]
    l2_dist: list[dict[str, float]]

    cdf_resol: int

    def __repr__(self) -> str:
        results_arr = array([
            [round(self.min_precision.real, 2), round(self.min_precision.imag, 2), round(self.min_precision.l2, 2)],
            [round(self.max_precision.real, 2), round(self.max_precision.imag, 2), round(self.max_precision.l2, 2)],
            [round(self.mean_precision.real, 2), round(self.mean_precision.imag, 2), round(self.mean_precision.l2, 2)],
            [round(self.median_precision.real, 2), round(self.median_precision.imag, 2), round(self.median_precision.l2, 2)]])
        
        return f"\n(Log2)\n(MIN prec, MAX prec, AVG prec, MED prec) x (real, imag, l2)\n{results_arr}\n"
    
    def calc_cdf(self, precs: list[float], res: list[dict[str, float]]):
        sorted_precs = sorted(precs)
        min_prec = sorted_precs[0]
        max_prec = sorted_precs[len(sorted_precs)-1]
        for i in range(self.cdf_resol):
            cur_prec = min_prec + float(i) * (max_prec - min_prec) / float(self.cdf_resol)
            for count_smaller, p in enumerate(sorted_precs):
                if p >= cur_prec:
                    res[i]["Prec"] = cur_prec
                    res[i]["Count"] = count_smaller
                    break


def delta_to_precision(c: Stats) -> Stats:
	return Stats(math.log2(1 / c.real), math.log2(1 / c.imag), math.log2(1 / c.l2))


def calc_median(values: list[Stats]) -> Stats:
    tmp = sorted([v.real for v in values])
    for i in range(len(values)): values[i].real = tmp[i]
    for i in range(len(values)): tmp[i] = values[i].imag
    tmp.sort()
    for i in range(len(values)): values[i].imag = tmp[i]
    for i in range(len(values)): tmp[i] = values[i].l2
    tmp.sort()
    for i in range(len(values)): values[i].l2 = tmp[i]
    index = len(values) // 2
    if len(values) & 1 == 1 or index + 1 == len(values):
        return Stats(values[index].real, values[index].imag, values[index].l2)

    return Stats((values[index].real + values[index+1].real) / 2,
		(values[index].imag + values[index+1].imag) / 2,
		(values[index].l2 + values[index+1].l2) / 2)


def evaluate_precision(values_test: list[complex], values_want: list[complex]) -> PrecisionStats:
    slots = len(values_want)
    diff = [Stats() for _ in range(slots)]

    prec = PrecisionStats()
    prec.max_delta = Stats(0, 0, 0)
    prec.min_delta = Stats(1, 1, 1)
    prec.mean_delta = Stats(0, 0, 0)
    prec.cdf_resol = 500
    prec.real_dist = [{"Prec": 0.0, "Count": 0.0} for _ in range(prec.cdf_resol)]
    prec.imag_dist = [{"Prec": 0.0, "Count": 0.0} for _ in range(prec.cdf_resol)]
    prec.l2_dist = [{"Prec": 0.0, "Count": 0.0} for _ in range(prec.cdf_resol)]

    prec_real = [0.0 for _ in range(len(values_want))]
    prec_imag = [0.0 for _ in range(len(values_want))]
    prec_l2 = [0.0 for _ in range(len(values_want))]

    for i in range(len(values_want)):
        delta_real = abs(values_test[i].real - values_want[i].real)
        delta_imag = abs(values_test[i].imag - values_want[i].imag)
        delta_l2 = math.sqrt(delta_real * delta_real + delta_imag * delta_imag)
        prec_real[i] = math.log2(1 / delta_real)
        prec_imag[i] = math.log2(1 / delta_imag)
        prec_l2[i] = math.log2(1 / delta_l2)

        diff[i].real = delta_real
        diff[i].imag = delta_imag
        diff[i].l2 = delta_l2

        prec.mean_delta.real += delta_real
        prec.mean_delta.imag += delta_imag
        prec.mean_delta.l2 += delta_l2

        if delta_real > prec.max_delta.real: prec.max_delta.real = delta_real
        if delta_imag > prec.max_delta.imag: prec.max_delta.imag = delta_imag
        if delta_l2 > prec.max_delta.l2: prec.max_delta.l2 = delta_l2
        if delta_real < prec.min_delta.real: prec.min_delta.real = delta_real
        if delta_imag < prec.min_delta.imag: prec.min_delta.imag = delta_imag
        if delta_l2 < prec.min_delta.l2: prec.min_delta.l2 = delta_l2

    prec.calc_cdf(prec_real, prec.real_dist)
    prec.calc_cdf(prec_imag, prec.imag_dist)
    prec.calc_cdf(prec_l2, prec.l2_dist)
    
    prec.min_precision = delta_to_precision(prec.max_delta)
    prec.max_precision = delta_to_precision(prec.min_delta)
    prec.mean_delta.real /= float(slots)
    prec.mean_delta.imag /= float(slots)
    prec.mean_delta.l2 /= float(slots)
    prec.mean_precision = delta_to_precision(prec.mean_delta)
    prec.median_delta = calc_median(diff)
    prec.median_precision = delta_to_precision(prec.median_delta)

    return prec


def precision_stats(mpc, result, expected) -> PrecisionStats:
    if isinstance(result, ndarray):
        _result = result.tolist()
    elif isinstance(result, ByVal):
        _result = [result]
    else:
        _result = result
    
    if isinstance(expected, ndarray):
        _expected = expected.tolist()
    elif isinstance(expected, ByVal):
        _expected = [expected]
    else:
        _expected = expected
    
    assert _result.shape == _expected.shape, f"Result and expected result shapes mismatch while checking MHE precision: {_result.shape} != {_expected.shape}"
    result_flattened = _result.flatten()
    expected_flattened = _expected.flatten()

    print(f"CP{mpc.pid}:\tValues computed [0:10]: {result_flattened[:10]} ...\n")
    print(f"CP{mpc.pid}:\tValues expected [0:10]: {expected_flattened[:10]} ...\n")

    precision_stats = evaluate_precision(result_flattened.to_complex(), expected_flattened.to_complex())
    print(precision_stats)

    return precision_stats


def score_binary_classificator(predictions, ground_truth):
    positives = [int(e >= 0) for e in predictions]
    pred = [(e * 2 - 1) for e in positives]
    true_positives_count = positives.numpy_eq(ground_truth).sum()
    accuracy = pred.numpy_eq(ground_truth).mean()
    precision = true_positives_count / positives.sum()
    recall = true_positives_count / ([int(e == 1) for e in ground_truth].sum())
    f1 = 2 * (precision * recall) / (precision + recall)
    return accuracy, precision, recall, f1


def distance_to_labels(value, labels):
    return [abs(l - value) for l in labels]


def score_multi_classificator(predictions, ground_truth):
    labels = sorted(list(set(ground_truth))).to_int()
    pred = [labels[argmin(distance_to_labels(p, labels))] for p in predictions]
    accuracy = pred.numpy_eq(ground_truth.to_int()).mean()
    return accuracy
