import os

from sequre.constants import DATA_SHARING_PORT, NUMBER_OF_PARTIES, CP_IPS, mpc_uint, MPC_FIELD_SIZE
from sequre.network.common import send_to_socket
from sequre.network.connect import connect
from sequre.network.socket import CSocket

from sequre.mpc.env import MPCEnv
from sequre.types.sharetensor import Sharetensor as Stensor

from utils import zeros


MODULUS = MPC_FIELD_SIZE  # TODO: Read from config


def broadcast(sockets, val):
    for socket in sockets: send_to_socket(socket, val)


def share(sockets, val):
    r = val.rand(MODULUS, "uniform")

    send_to_socket(sockets[1], r)
    send_to_socket(sockets[2], val.sub_mod(r, MODULUS))


def secret_share(*args):
    sockets = []
    
    for i in range(NUMBER_OF_PARTIES):  # Number of CPs
        if os.getenv('LOCAL', ''): raise NotImplementedError("Local secret sharing should be done through mpc.comms.share before issue #160 if done")
        else: sockets.append(CSocket(ip_address=CP_IPS[i], port=str(DATA_SHARING_PORT + i)))
    
        if (not connect(sockets[i])):
            raise ValueError(f"Failed to connect with CP{i}")
    
    broadcast(sockets, len(args))

    for arg in args:
        m, n = arg.shape
        broadcast(sockets, m)
        broadcast(sockets, n)
        share(sockets, arg.to_fp(MODULUS))
    
    print('Secret sharing done!')


def pool_shares():
    pid = int(os.getenv('PID', '-1'))
    if pid < 0: raise ValueError("Computing party ID is not provided.")
    
    mpc = MPCEnv[mpc_uint](pid, default_mpc_modulus=MODULUS, local=False, expect_data_sharing=True)  # TODO: #160 Implement local network setup for pooling shares
    print(f"CP{mpc.pid}:\tInitialized MPC")
    
    number_of_args = mpc.comms.receive(mpc.pid, T=int)

    args = []

    for _ in range(number_of_args):
        m = mpc.comms.receive(mpc.pid, T=int)
        n = mpc.comms.receive(mpc.pid, T=int)
        arg = mpc.comms.receive(mpc.pid, T=List[List[mpc_uint]]) if mpc.pid != 0 else zeros((m, n))
        sv = Stensor(arg, MODULUS)
        sv.fp = True
        args.append(sv)
    
    return mpc, args
