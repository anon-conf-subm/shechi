import time

from numpy.ndarray import ndarray

from sequre.utils.stats import evaluate_precision
from sequre.constants import MPC_NBIT_F
from sequre.utils.io import log, is_cached, store_cache, read_cache


def assert_eq(name, result, expected, silent_pass: bool = False):
    result_repr = result.abbrv() if isinstance(result, list) or isinstance(result, ndarray) else result.__repr__()
    expected_repr = expected.abbrv() if isinstance(expected, list) or isinstance(expected, ndarray) else expected.__repr__()
    assert (result == expected).all(), f'{name} failed! Result: {result_repr}.\n\nExpected: {expected_repr}'
    if not silent_pass: print(f'{name} passed.')


def assert_geq(name, result, expected, silent_pass: bool = False):
    result_repr = result.abbrv() if isinstance(result, list) or isinstance(result, ndarray) else result.__repr__()
    expected_repr = expected.abbrv() if isinstance(expected, list) or isinstance(expected, ndarray) else expected.__repr__()
    assert (result >= expected).all(), f'{name} failed! Result: {result_repr}.\n\nExpected to be greater than: {expected_repr}'
    if not silent_pass: print(f'{name} passed.')


def assert_leq(name, result, expected, silent_pass: bool = False):
    result_repr = result.abbrv() if isinstance(result, list) or isinstance(result, ndarray) else result.__repr__()
    expected_repr = expected.abbrv() if isinstance(expected, list) or isinstance(expected, ndarray) else expected.__repr__()
    assert (result <= expected).all(), f'{name} failed! Result: {result_repr}.\n\nExpected to be greater than: {expected_repr}'
    if not silent_pass: print(f'{name} passed.')


def assert_eq_approx(name, result, expected, error: float = 0.018, silent_pass: bool = False):
    # Scale error with the fractional size precision
    error += 1.0 / (2 ** MPC_NBIT_F)
    result_repr = result.abbrv() if isinstance(result, list) or isinstance(result, ndarray) else result.__repr__()
    expected_repr = expected.abbrv() if isinstance(expected, list) or isinstance(expected, ndarray) else expected.__repr__()
    check: bool = ((expected - error) < result).all() and (result < (expected + error)).all()

    fail_message = f"{name} failed!\n\nResult: {result_repr}.\n\nExpected: {expected_repr}"
    if isinstance(expected, ndarray) or isinstance(expected, list):
        if not check:
            precision_stats = evaluate_precision(result.flatten().tolist().to_complex(), expected.flatten().tolist().to_complex())
            error_message = f"{fail_message}\n\n" \
                            f"Precision stats:\n\tMIN precision: {precision_stats.min_precision.real}\n\tMAX precision: {precision_stats.max_precision.real}\n\tAVG precision: {precision_stats.mean_precision.real}\n"
            print(error_message)            

    assert check, fail_message
    if not silent_pass: print(f'{name} passed.')


def assert_distributed_eq_approx(mpc, name, result, expected, error: float = 0.018, silent_pass: bool = False):
    if mpc.pid:
        assert_eq_approx(name, result, expected, error, silent_pass)
    else:
        assert_eq(f"{name} (at trusted dealer)", result, expected.zeros(), silent_pass)


def assert_and_cache(mpc, name, callee, secure_args, raw_args):
    if isinstance(secure_args[0], ndarray):
        result = callee(*secure_args)
        return result, result
    
    if not is_cached(name):
        print(f"CP{mpc.pid}:\t{name} cache not found. Computing {name} ...")
        result = callee(*secure_args)
        result_raw = callee(*raw_args)
        if mpc.pid:
            assert_eq_approx(name, result.reveal(mpc), result_raw)
        if mpc.pid == 2:
            store_cache(result_raw, name)
    else:
        print(f"CP{mpc.pid}:\tReading {name} from cache ...")
        result_raw = read_cache(name, dtype=type(raw_args[0]))
        result = secure_args[0].enc(mpc, result_raw)

    return result, result_raw


def time_frame(mpc, func, name, modulus, *args):
    mpc.stats.reset_stats()
    local_suffix = '_local' if mpc.local else '_online'
    alg_structure = 'Ring' if modulus.popcnt() == 1 else 'Field'

    stats_file_path = f'results/{"_".join(name.lower().split())}_stats_CP{mpc.pid}{local_suffix}_on_{alg_structure.lower()}.txt'
    results_file_path = f'results/{"_".join(name.lower().split())}_results_CP{mpc.pid}{local_suffix}_on_{alg_structure.lower()}.txt'

    with open(stats_file_path, 'w') as stats_f:
        mpc.stats.reset_stats()
        s = time.time()
        result = func(mpc, modulus, *args)
        e = time.time()

        runtime_message = f'\n{name} done in {e - s}s at CP{mpc.pid}\n'
        stats_f.write(f'{alg_structure} size: {modulus}')
        stats_f.write(runtime_message)
        mpc.stats.print_stats(stats_f)
        print(runtime_message)

        if result is not None:
            log(
                name=name,
                data=result.reveal(mpc).tolist(),
                path=results_file_path,
                mode='w',
                separator=' ')
        
    mpc.comms.sync_parties()
