""" Multiple imputation module """

import prg

from tqdm import tqdm

from numpy.ndarray import ndarray
from numpy.create import zeros

from sequre import sequre
from sequre.utils.io import log
from sequre.constants import MI_BATCHED_MODE, MI_STOCHASTIC_MODE
from sequre.types.multiparty_union import MPU


class Imputer[M]:
    model: M

    def __init__(self, model: M):
        self.model = model
    
    @staticmethod
    def count_missing_data(data: ndarray, target_col: int, miss_val: float) -> int:
        miss_count = 0
        
        for row in data:
            if row[target_col] == miss_val:
                miss_count += 1
        
        return miss_count
    
    @staticmethod
    def split_train_test(data: ndarray, target_col: int, miss_val: float):
        m, n = data.shape
        miss_count = Imputer.count_missing_data(data, target_col, miss_val)

        X = zeros((m - miss_count, n - 1), dtype=type(data._data[0]))
        y = zeros((m - miss_count, 1), dtype=type(data._data[0]))
        X_complement = zeros((miss_count, n - 1), dtype=type(data._data[0]))

        x_idx = 0
        x_com_idx = 0
        for i in range(m):
            row = data[i]
            row_complement = row.erase_element(target_col)
            if row[target_col] == miss_val:
                X_complement[x_com_idx] = row_complement
                x_com_idx += 1
            else:
                X[x_idx] = row_complement
                y[x_idx][0] = row[target_col]
                x_idx += 1
        
        return X, X_complement, y
    
    @staticmethod
    def split_train_test_partitioned(data, target_col: int, miss_rows: List[int]):
        if not isinstance(data, MPU):
            compile_error("split_train_test_partitioned is reserved only for MPU type")
        assert data.is_mpp(), "Imputer: Invalid MPU sub-type. It should be MPP."
        
        mpc = data.mpc
        ratios = data._mpp._ratios
        m, n = data.shape_local
        
        if mpc.pid == 0:
            miss_count = len(miss_rows)
        else:
            miss_count = 0
            lower_bound = ratios[:mpc.pid - 1].sum()
            upper_bound = ratios[:mpc.pid].sum()

            for miss_row in miss_rows:
                if lower_bound <= miss_row < upper_bound:
                    miss_count += 1

        _complete_rows = zeros((m - miss_count, n - 1))
        _complete_labels = zeros((m - miss_count, 1))
        _incomplete_rows = zeros((miss_count, n - 1))

        if mpc.pid == 0:
            return (MPU(mpc, _complete_rows, "partition"),
                    MPU(mpc, _incomplete_rows, "partition"),
                    MPU(mpc, _complete_labels, "partition"))

        x_idx = 0
        x_com_idx = 0
        for local_i in range(m):
            actual_i = lower_bound + local_i
            row = data._mpp._local_data[local_i]
            row_complement = row.erase_element(target_col)
            if actual_i in miss_rows:
                _incomplete_rows[x_com_idx] = row_complement
                x_com_idx += 1
            else:
                _complete_rows[x_idx] = row_complement
                _complete_labels[x_idx, 0] = row[target_col]
                x_idx += 1
        
        return (MPU(mpc, _complete_rows, "partition"),
                MPU(mpc, _incomplete_rows, "partition"),
                MPU(mpc, _complete_labels, "partition"))

    @staticmethod
    def split_train_test(data, target_col: int, miss_rows: List[int]):
        if isinstance(data, MPU):
            return Imputer.split_train_test_partitioned(data, target_col, miss_rows)
        
        m, n = data.shape
        miss_count = len(miss_rows)

        complete_rows = data.zeros((m - miss_count, n - 1))
        complete_labels = data.zeros((m - miss_count, 1))
        incomplete_rows = data.zeros((miss_count, n - 1))

        x_idx = 0
        x_com_idx = 0
        for i in range(m):
            row = data[i]
            row_complement = row.erase_element(target_col)
            if i in miss_rows:
                incomplete_rows[x_com_idx] = row_complement
                x_com_idx += 1
            else:
                complete_rows[x_idx] = row_complement
                complete_labels[x_idx, 0] = row[target_col]
                x_idx += 1
        
        return complete_rows, incomplete_rows, complete_labels
    
    def fit(self, mpc, complete_data, complete_labels, step, epochs, mode, verbose=False):
        assert mode in {MI_BATCHED_MODE, MI_STOCHASTIC_MODE}, f"MI: Invalid imputation model training mode: {mode}. Should be either {MI_BATCHED_MODE} or {MI_STOCHASTIC_MODE}."
        if mode == MI_STOCHASTIC_MODE:
            self.model.randomize_weights(mpc)
        self.model.fit(mpc, X=complete_data, y=complete_labels, step=step, epochs=epochs, verbose=verbose)
    
    def impute(self, mpc, data, miss_rows: List[int], miss_col: int, step: float, epochs: int, noise_scale: float):
        complete_data, incomplete_data, complete_labels = Imputer.split_train_test(mpc, data, miss_col, miss_rows)
        
        if len(incomplete_data) == 0:
            return complete_data.copy()
        
        self.model.fit(mpc, X=complete_data, y=complete_labels, step=step, epochs=epochs)
        imputed_y = self.model.predict(mpc, incomplete_data, noise_scale)

        return Imputer.update(data, imputed_y, miss_rows, miss_col, False)

    def impute(self, mpc, data, incomplete_data, miss_rows, miss_col, noise_scale):
        imputed_y = self.model.predict(mpc, incomplete_data, noise_scale)
        return Imputer.update(data, imputed_y, miss_rows, miss_col, False)
    
    def impute_inplace(self, mpc, data, mask, miss_col, noise_scale):
        if mask.sum() == 0:  # Nothing to impute --- no missing data
            return
        
        reference_data = data[:, :miss_col].hstack(data[:, miss_col+1:])
        imputed_y = self.model.predict(mpc, reference_data.filter(mask), noise_scale)

        Imputer.update_via_mask(data, imputed_y, mask, miss_col, True)

    @staticmethod
    def update(data, imputed_y, miss_rows, miss_col, inplace):
        idx = 0
        imputed_data = data if inplace else data.copy()
        for i in miss_rows:
            if isinstance(data, MPU):
                imputed_data[i, miss_col] = imputed_y.reveal()[idx, 0]
            else:
                imputed_data[i, miss_col] = imputed_y[idx, 0]
            idx += 1

        return imputed_data
    
    @staticmethod
    def update_via_mask(data, imputed_y, mask, miss_col, inplace):
        idx = 0
        imputed_data = data if inplace else data.copy()
        for i in range(len(mask)):
            if mask[i]:
                if isinstance(data, MPU):
                    imputed_data[i, miss_col] = imputed_y.reveal()[idx, 0]
                else:
                    imputed_data[i, miss_col] = imputed_y[idx, 0]
                idx += 1

        return imputed_data
    

class MI[IM, FM]:
    imputer: Imputer[IM]
    model: FM
    factor: int

    def __init__(self, factor: int, impute_model: IM, fit_model: FM):
        self.imputer = Imputer(impute_model)
        self.model = fit_model
        self.factor = factor

    @staticmethod
    def rubin(mpc, weights: List):
        return MI._rubin(mpc, weights)
    
    def fit(self, mpc, data, labels, miss_rows, miss_col, im_step, fm_step, im_epochs, fm_epochs, noise_scale, mode, dump_imputed_data=False, verbose=False):
        assert mode in {MI_BATCHED_MODE, MI_STOCHASTIC_MODE}, f"MI: Invalid imputation model training mode: {mode}. Should be either {MI_BATCHED_MODE} or {MI_STOCHASTIC_MODE}."
        complete_data, incomplete_data, complete_labels = Imputer.split_train_test(data, miss_col, miss_rows)
        
        imputed_data = []
        if mode == MI_BATCHED_MODE:
            self.imputer.fit(mpc, complete_data=complete_data, complete_labels=complete_labels,
                            step=im_step, epochs=im_epochs, mode=mode, verbose=verbose)
            
            imputed_data = [self.imputer.impute(
                mpc, data=data, incomplete_data=incomplete_data,
                miss_rows=miss_rows, miss_col=miss_col, noise_scale=noise_scale) for _ in range(self.factor)]
        elif mode == MI_STOCHASTIC_MODE:
            for _ in range(self.factor):
                self.imputer.fit(mpc, complete_data=complete_data, complete_labels=complete_labels,
                    step=im_step, epochs=im_epochs, mode=mode, verbose=verbose)
                
                imputed_data.append(self.imputer.impute(
                    mpc, data=data, incomplete_data=incomplete_data,
                    miss_rows=miss_rows, miss_col=miss_col, noise_scale=noise_scale))
        
        if dump_imputed_data:
            for i, data in enumerate(imputed_data):
                revealed_data = data.reveal(mpc).tolist()
                if mpc.pid == 2:
                    log("", revealed_data, path=f'data/mi/sequre_output_{i + 1}.txt', mode='w', separator=' ')
        
        weights = []
        for data in imputed_data:
            self.model.fit(mpc, X=data, y=labels, step=fm_step, epochs=fm_epochs)
            weights.append(self.model.coef_.copy())
        
        self.model.coef_ = MI.rubin(mpc, weights)
        return self, imputed_data
    
    @sequre
    def _rubin(mpc, weights: List):
        return weights.sum() / len(weights)


class BatchMI[IM, FM]:
    imputers: List[Imputer[IM]]
    model: FM
    factor: int

    def __init__(self, factor: int, impute_models: List[IM], fit_model: FM):
        self.imputers = [Imputer(impute_model) for impute_model in impute_models]
        self.model = fit_model
        self.factor = factor

    def fit(self, mpc, incomplete_data, complete_data, labels, miss_row_masks,
            im_step, fm_step, im_epochs, fm_epochs, noise_scale,
            dump_imputed_data=False, verbose=False):
        miss_col = 0
        for imputer in self.imputers:
            train_data = complete_data[:, :miss_col].hstack(complete_data[:, miss_col+1:])
            train_labels = complete_data[:, miss_col:miss_col+1]
            
            imputer.fit(mpc, complete_data=train_data, complete_labels=train_labels,
                        step=im_step, epochs=im_epochs, mode="batched", verbose=verbose)
            miss_col += 1
        
        imputed_data = []
        weights = []
        for _ in range(self.factor):
            inter_imputed_data = incomplete_data.copy()
            self.impute_inplace(mpc, inter_imputed_data, miss_row_masks, noise_scale=noise_scale)
            imputed_data.append(inter_imputed_data)
            
            if dump_imputed_data:
                revealed_data = inter_imputed_data.reveal(mpc).tolist()
                if mpc.pid == 2:
                    log("", revealed_data, path=f'data/mi/batch_mi_output_{_ + 1}.txt', mode='w', separator=' ')
            
            self.model.fit(mpc, X=inter_imputed_data, y=labels, step=fm_step, epochs=fm_epochs)
            weights.append(self.model.coef_.copy())
        
        self.model.coef_ = MI.rubin(mpc, weights)
        return self, imputed_data
    
    def impute_inplace(self, mpc, incomplete_data, miss_row_masks, noise_scale):
        miss_col = 0
        for imputer in self.imputers:
            imputer.impute_inplace(
                mpc, data=incomplete_data,
                mask=miss_row_masks[miss_col], miss_col=miss_col, noise_scale=noise_scale)
            miss_col += 1
