import math

from sequre.attributes import sequre
from sequre.settings import DEBUG


def chebyshev_nodes(n, interval):
    a, b = interval
    x, y = 0.5 * (a + b), 0.5 * (b - a)
    return [(x + y * math.cos((k - 0.5) * (math.pi / n)))
            for k in range(1, n + 1)]


def chebyshev_coeffs(op, nodes, interval):
    a, b = interval
    n = len(nodes)
    coeffs = [0.0 for _ in range(n)]
    y = [op(node) for node in nodes]

    for i in range(n):
        u = (2 * nodes[i] - a - b) / (b - a)
        t_prev = 1.0
        t = u

        for j in range(n):
            coeffs[j] += y[i] * t_prev
            t_next = 2 * u * t - t_prev
            t_prev = t
            t = t_next

    coeffs[0] /= n
    for i in range(1, n):
        coeffs[i] *= (2.0 / n)

    return coeffs


@sequre
def chebyshev_evaluate(mpc, x, coeffs, interval):
    n = len(coeffs)
    a, b = interval
    scaled_x = x * (2 / (b - a)) - (a + b) / (b - a)

    if DEBUG:
        print(f"CP{mpc.pid}:\t Evaluating Chebyshev")
        if mpc.pid:
            min_val = x.reveal(mpc).min()
            max_val = x.reveal(mpc).max()
            assert interval[0] <= min_val <= max_val <= interval[1], f"\tCP{mpc.pid}: Chebyshev interpolation: The input values fall within segment [{min_val}, {max_val}] which is not contained within the Chebyshev interval {interval}."
    
    w_2 = scaled_x * (coeffs[n - 1] * 2) + coeffs[n - 2]
    w_1 = scaled_x * w_2 * 2 - (coeffs[n - 1] - coeffs[n - 3])
    w_0 = scaled_x * w_1 * 2 - w_2 + coeffs[n - 4]

    for i in range(n - 5, -1, -1):
        if DEBUG:
            print(f"CP{mpc.pid}:\t Evaluating Chebyshev {n - 4 - i}/{n - 4}")
        
        w_2, w_1 = w_1, w_0
        w_0 = scaled_x * w_1 * 2 - w_2 + coeffs[i]
    
    return w_0 - scaled_x * w_1


def via_chebyshev(mpc, x, op, interval, degree: int):
    coeffs = chebyshev_coeffs(
        op=op,
        nodes=chebyshev_nodes(degree + 1, interval),
        interval=interval)

    return chebyshev_evaluate(mpc, x, coeffs, interval)
