import sys

from sequre.mpc.env import MPCEnv
from sequre.constants import RUN_TOGGLES, MPC_FIELD_SIZE, MPC_RING_SIZE, NUMBER_OF_PARTIES

from C import fork() -> int
from C import wait(cobj) -> int


def client(pid, foo, control_toggles, local, modulus, *args):
    # Initialize MPC environment
    mpc = MPCEnv(pid, local, modulus)
    if not control_toggles[RUN_TOGGLES.MHE_SETUP_SKIP_FLAG]:
        mpc.mhe.default_setup()

    foo(mpc, *args)

    # This is here just to keep P0 online until the end for data transfer
    # In practice, P0 would send data in advance before each phase and go offline
    mpc.done()


def fork_parties(fork_level, last_pid, foo, control_toggles, modulus, *args):
    null = 0
    pid = fork()
    if pid == 0:
        client(fork_level, foo, control_toggles, True, modulus, *args)
    elif fork_level + 1 == last_pid:
        client(fork_level + 1, foo, control_toggles, True, modulus, *args)
        wait(__ptr__(null).as_byte())
    else:
        fork_parties(fork_level + 1, last_pid, foo, control_toggles, modulus, *args)


def local(foo):
    def wrapper_local(*args, **kwargs):
        command = sys.argv[1:]
        flags = [arg for arg in command if arg.startswith('--')]
        toggles = {toggle: toggle in flags for toggle in RUN_TOGGLES}
        modulus = MPC_RING_SIZE if toggles[RUN_TOGGLES.USE_RING_FLAG] else MPC_FIELD_SIZE
        fork_parties(0, NUMBER_OF_PARTIES - 1, foo, toggles, modulus, *args, **kwargs)
    return wrapper_local


def mpc():
    command = sys.argv[1:]
    flags = [arg for arg in command if arg.startswith('--')]
    args = [arg for arg in command if arg not in flags]
    toggles = {toggle: toggle in flags for toggle in RUN_TOGGLES}

    modulus = MPC_RING_SIZE if toggles[RUN_TOGGLES.USE_RING_FLAG] else MPC_FIELD_SIZE
    mpc = MPCEnv(int(args[0]), False, modulus)
    if not toggles[RUN_TOGGLES.MHE_SETUP_SKIP_FLAG]:
        mpc.mhe.default_setup()
    
    return mpc
