from sequre.stdlib.learn.neural_net.layers import Input, Dense
from sequre.stdlib.learn.neural_net.model import Sequential
from sequre.utils.stats import score_binary_classificator


def credit_score(mpc, X, y, optimizer, loss, step_size, epochs, momentum, verbose):
    layers = (
        Input[type(X)](X.shape[1]),
        Dense[type(X)]("relu", 32, "normal", "zeros"),
        Dense[type(X)]("linear", 1, "normal", "zeros"))
    
    print(f"CP{mpc.pid}:\tCredit score: compiling sequential model ...")
    model = Sequential(layers).compile(mpc, loss=loss, optimizer=optimizer)
    
    print(f"CP{mpc.pid}:\tCredit score: training sequential model ...")
    model.fit(mpc, X=X, y=y, epochs=epochs, step=step_size, momentum=momentum, verbose=verbose)
    
    loss = model.get_loss(mpc, X, y).reveal(mpc).sum()
    print(f"CP{mpc.pid}:\tCredit score final training loss: {loss}")

    prediction = model.predict(mpc, X).reveal(mpc)
    accuracy, precision, recall, f1 = score_binary_classificator(
        prediction.reveal(mpc).flatten().tolist(),
        y.reveal(mpc).flatten().astype(int).tolist())
    print(
        f"CP{mpc.pid}:\tCredit score accuracy stats:\n"
        f"\t\tAccuracy: {accuracy}.\n"
        f"\t\tPrecision: {precision}.\n"
        f"\t\tRecall: {recall}.\n"
        f"\t\tF1: {f1}.\n")
